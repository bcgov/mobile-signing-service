apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: Deployment template for a nodejs server and postgres db.
    iconClass: icon-node
    tags: node
  name: cicd-api-deployment
  namespace: devhub-tools
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the minio server
    labels:
      app: ${MINIO_DEPLOYMENT_NAME}
    name: ${MINIO_DEPLOYMENT_NAME}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      deploymentconfig: ${MINIO_DEPLOYMENT_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    labels:
      app: ${API_NAME}
    name: ${API_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      targetPort: 8080
    selector:
      deploymentconfig: ${API_NAME}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${API_NAME}
    name: ${API_NAME}
  spec:
    path: ""
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${API_NAME}
      weight: 100
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${API_NAME}
    name: ${API_NAME}-web
  spec:
    host: ${WEBAPP_HOST}
    path: /api
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${API_NAME}
      weight: 100
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${API_NAME}
    name: ${MINIO_DEPLOYMENT_NAME}
  spec:
    port:
      targetPort: 9000-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: ${MINIO_DEPLOYMENT_NAME}
      weight: 100
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the minio server
    name: ${MINIO_DEPLOYMENT_NAME}
  spec:
    replicas: 1
    selector:
      app: minio
      deploymentconfig: ${MINIO_DEPLOYMENT_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: minio
          deploymentconfig: ${MINIO_DEPLOYMENT_NAME}
      spec:
        containers:
        - env:
          - name: MINIO_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: accessKey
                name: ${MINIO_DEPLOYMENT_NAME}
          - name: MINIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: secretKey
                name: ${MINIO_DEPLOYMENT_NAME}
          - name: MINIO_CONFIG_DIR
            value: /tmp
          - name: MINIO_DATA_DIR
            value: /data
          image: 172.50.0.2:5000/openshift/minio:latest
          imagePullPolicy: Always
          name: ${MINIO_DEPLOYMENT_NAME}
          ports:
          - containerPort: 9000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: minio-vol
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: minio-vol
          persistentVolumeClaim:
            claimName: ${MINIO_VOLUME_NAME}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - minio
        from:
          kind: ImageStreamTag
          name: minio:latest
          namespace: openshift
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    name: ${API_NAME}
  spec:
    replicas: 1
    selector:
      name: ${API_NAME}
    strategy:
      type: Rolling
    template:
      metadata:
        labels:
          name: ${API_NAME}
        name: ${API_NAME}
      spec:
        containers:
        - env:
          - name: MINIO_HOST
            value: ${MINIO_DEPLOYMENT_NAME}.${NAMESPACE}.svc
          - name: POSTGRESQL_HOST
            value: ${POSTGRES_DEPLOYMENT_NAME}.${NAMESPACE}.svc
          - name: PORT
            value: ${PORT}
          - name: NODE_ENV
            value: ${NODE_ENV}
          - name: API_URL
            value: ${API_URL}
          - name: AGENT_URL
            value: ${AGENT_URL}
          image: ' '
          livenessProbe:
            httpGet:
              path: /api/v1/ehlo
              port: 8080
            initialDelaySeconds: 300
            timeoutSeconds: 3
          name: ${API_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/v1/ehlo
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              cpu: ${API_CPU_LIMIT}
              memory: ${API_MEMORY_LIMIT}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${API_NAME}
        from:
          kind: ImageStreamTag
          name: ${API_NAME}:${API_IMAGE_TAG}
          namespace: ${API_IMAGE_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${MINIO_VOLUME_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${MINIO_VOLUME_CAPACITY}
parameters:
- description: The name assigned to all of the objects defined in this template.  You
    should keep this as default unless your know what your doing.
  displayName: Name
  name: API_NAME
  required: true
  value: signing-api
- description: The tag given to the built image.
  displayName: Output Image Tag
  name: API_IMAGE_TAG
  required: true
  value: latest
- description: The namespace of the OpenShift project containing the imagestream for
    the application.
  displayName: Image Namespace
  name: API_IMAGE_NAMESPACE
  required: true
  value: 22e0ba-tools
- description: The namespace of the OpenShift project containing the imagestream for
    the application.
  displayName: Environment namespace
  name: NAMESPACE
  required: true
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: API_MEMORY_LIMIT
  required: true
  value: 1Gi
- description: Maximum amount of CPU core the container can use.
  displayName: CPU core Limit
  name: API_CPU_LIMIT
  required: true
  value: "1"
- description: The name given to the minio instance deployment.
  displayName: Minio deployment name
  name: MINIO_DEPLOYMENT_NAME
  required: true
  value: minio
- displayName: Name of the minio storage PV
  name: MINIO_VOLUME_NAME
  required: true
  value: minio-data
- displayName: Size of minio storage PV in Gi
  from: '[0-9]{3}Gi'
  name: MINIO_VOLUME_CAPACITY
  required: true
  value: 3Gi
- description: The perferd port for the server to listen on.
  displayName: Server Port
  name: PORT
  required: true
  value: "8080"
- description: 'The node environment. Typically: develop, test, stage, or production'
  displayName: Node Environment
  name: NODE_ENV
  required: true
- description: The fully qualified external URL to access this service.
  displayName: Public API URL
  name: API_URL
  required: true
  value: http://example.com/
- description: The fully qualified external URL to access this service.
  displayName: Public API URL
  name: WEBAPP_HOST
  required: true
- description: The fully qualified external URL to access this service.
  displayName: Public API URL
  name: AGENT_URL
  required: true
