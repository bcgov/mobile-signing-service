---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: |-
      Patroni Postgresql database cluster, with persistent storage.
    iconClass: icon-postgresql
    openshift.io/display-name: Patroni Postgresql (Persistent)
    openshift.io/long-description: |
      This template deploys a patroni postgresql HA
      cluster with persistent storage.
    tags: postgresql
  name: patroni-pgsql-persistent
labels:
  app: patroni-pgsql
  phase: deploy
  app.kubernetes.io/instance: patroni
  app.kubernetes.io/component: database
  app.kubernetes.io/name: patroni
  app.kubernetes.io/managed-by: template
objects:
  - apiVersion: security.devops.gov.bc.ca/v1alpha1
    kind: NetworkSecurityPolicy
    metadata:
      name: db-to-db
      labels:
        app: patroni-pgsql
    spec:
      description: |
        allow patroni pods to talk to one another for replication
        etc.
      source:
        - - '$namespace=${NAMESPACE}'
          - 'statefulset=patroni'
      destination:
        - - '$namespace=${NAMESPACE}'
          - 'statefulset=patroni'
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: patroni-env
      labels:
        app: patroni-pgsql
    data:
      PATRONI_SCOPE: patroni
      PATRONI_LOG_LEVEL: WARNING
      PATRONI_POSTGRESQL_DATA_DIR: /home/postgres/pgdata/pgroot/data
      PATRONI_POSTGRESQL_PGPASS: /tmp/pgpass
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: patroni-pgsql
        cluster-name: patroni
      name: patroni-master
    spec:
      ports:
        - port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        cluster-name: patroni
        role: master
        app.kubernetes.io/name: patroni
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      generation: 3
      labels:
        app: patroni-pgsql
        cluster-name: patroni
      name: patroni
    spec:
      podManagementPolicy: OrderedReady
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          statefulset: patroni
      serviceName: patroni
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: patroni-pgsql
            statefulset: patroni
            cluster-name: patroni
            app.kubernetes.io/name: patroni
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: statefulset
                        operator: In
                        values:
                          - patroni
                  topologyKey: "kubernetes.io/hostname"
          containers:
            - name: patroni
              envFrom:
                - secretRef:
                    name: patroni-creds
                - configMapRef:
                    name: patroni-env
              env:
              - name: PATRONI_KUBERNETES_LABELS
                value: '{"cluster-name": "patroni", "app.kubernetes.io/name": "patroni"}'
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
              - name: PATRONI_KUBERNETES_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: PATRONI_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              image: image-registry.openshift-image-registry.svc:5000/bcgov/patroni-postgres:${IMAGE_TAG}
              # Because we are using image reference to a tag, we need to always pull the image otherwise
              #   we end up with outdated/out-of-sync image depending on the node where it is running
              imagePullPolicy: IfNotPresent
              name: postgresql
              ports:
                - containerPort: 8008
                  protocol: TCP
                - containerPort: 5432
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              readinessProbe:
                initialDelaySeconds: 5
                timeoutSeconds: 5
                failureThreshold: 4
                exec:
                  command:
                    - /usr/share/scripts/patroni/health_check.sh
              volumeMounts:
                - mountPath: /home/postgres/pgdata
                  name: postgresql
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
          serviceAccountName: patroni
          terminationGracePeriodSeconds: 0
      updateStrategy:
        type: RollingUpdate
      volumeClaimTemplates:
        - metadata:
            annotations:
              volume.beta.kubernetes.io/storage-class: netapp-file-standard
            labels:
              app: patroni-pgsql
            name: postgresql
          spec:
            storageClassName: netapp-file-standard
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: ${PVC_SIZE}
parameters:
  - name: NAMESPACE
    displayName: Namespace
    description: |
      The k8s namespace this deployment is being run
      agains.
    required: true
  - name: REPLICAS
    displayName: Replicas
    description: |
      The number of StatefulSet replicas (pods) that will be run.
    required: true
  - name: CPU_REQUEST
    displayName: CPU Request
    description: |
      The minimal amount of CPU required to start and run a pod in
      the replica set.
    required: true
  - name: CPU_LIMIT
    displayName: CPU Limit
    description: |
      The burstable maximum amount of CPU this application can utilize
      if available on the host machine.
    requred: true
  - name: MEMORY_REQUEST
    displayName: Memory Request
    description: |
      The minimal amount of memory required to start and run a
      pod in the statefulset set.
    required: true
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: |
      The burstable maximum amount of memory a pod in the
      statefulset can utilize if available on the host
      machine if available.
  - name: IMAGE_TAG
    description: |
      The image tag used to specify which image you would like
      deployed. Don't use `latest`.
    required: true
  - name: PVC_SIZE
    displayName: Persistent Volume Size
    description: |
      The size of the persistent volume to create for each pod
      in the StatefulSet. Note: REPLICAS * PVC_SIZE will be the
      total storage size consumed.
    required: true
